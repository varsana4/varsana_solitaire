In my card game, I used a few core design patterns to keep things organized and reusable. One of the main ones was the Flyweight pattern, which I used in the CardClass. Instead of giving every card its own separate image and size data, all cards share the same sprite sheet and dimensions. Suit, rank, and face-up status change between cards but the rest of them are shared. This saved memory and kept the code simpler. I also used the Prototype pattern when creating piles and cards. I started with a base pile object that had common functions like canAddCard() and draw(), and then copied it to make special piles like tableau and foundation with slight rule changes. I did something similar with cards—cloning a basic card and changing the suit and rank to make the full deck. It made setting things up way easier without repeating code. Lastly, the State pattern helped manage user interactions and game phases. For example, when a card is selected, the game switches to a "selected" state, waiting for the player to drop it or cancel. The stock pile also changes behavior depending on whether it’s full, empty, or recycling. This made interactions feel smoother and more reliable.

One of the things I think I did well in this project was seperating the game into different modules for card behavior, pile logic, and user input. This modular approach helped me stay organized and made it easier to focus on one system at a time. It made it easier when I was debugging something with the piles or adjusting how cards were rendered. It also made testing more efficient since I could isolate individual parts. Another success was how I handled the drag-and-drop interaction. If I were to do this project again, one of the things I’d do differently is focus earlier on edge cases and game state transitions, especially for win and loss detection.  I also think using the Command pattern from the start could have helped manage player actions more effectively. Representing actions like card moves as command objects would have made it much easier to implement features like undo, redo, or even replay. 

Sprites: https://kenney.nl/assets/boardgame-pack

